package com.micro.web.dao.impl;

import com.micro.web.dao.DoctorDAO;
import com.micro.web.dto.BaseResultDto;
import com.micro.web.dto.DoctorSearchDto;
import com.micro.web.entities.Doctor;
import com.micro.web.entities.DoctorExample;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.stereotype.Component;
@Component
public class DoctorDAOImpl extends BaseDao implements DoctorDAO {

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public DoctorDAOImpl() {
        super();
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public void insert(Doctor record) {
        getSqlMapClientTemplate().insert("doctor.abatorgenerated_insert", record);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public int updateByPrimaryKey(Doctor record) {
        int rows = getSqlMapClientTemplate().update("doctor.abatorgenerated_updateByPrimaryKey", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public int updateByPrimaryKeySelective(Doctor record) {
        int rows = getSqlMapClientTemplate().update("doctor.abatorgenerated_updateByPrimaryKeySelective", record);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public List selectByExample(DoctorExample example, String orderByClause) {
        Map parms = getExampleParms(example);
        if (orderByClause != null) {
            parms.put("ABATOR_ORDER_BY_CLAUSE", orderByClause);
        }
        List list = getSqlMapClientTemplate().queryForList("doctor.abatorgenerated_selectByExample", parms);
        return list;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public List selectByExample(DoctorExample example) {
        return selectByExample(example, null);
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public Doctor selectByPrimaryKey(Long doctorid) {
        Doctor key = new Doctor();
        key.setDoctorid(doctorid);
        Doctor record = (Doctor) getSqlMapClientTemplate().queryForObject("doctor.abatorgenerated_selectByPrimaryKey", key);
        return record;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public int deleteByExample(DoctorExample example) {
        int rows = getSqlMapClientTemplate().delete("doctor.abatorgenerated_deleteByExample", getExampleParms(example));
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    public int deleteByPrimaryKey(Long doctorid) {
        Doctor key = new Doctor();
        key.setDoctorid(doctorid);
        int rows = getSqlMapClientTemplate().delete("doctor.abatorgenerated_deleteByPrimaryKey", key);
        return rows;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getdoctoridExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getDoctorid_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_NULL", "Y");
            } else {
                parms.put("AND_doctorid_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_NOT_NULL", "Y");
            } else {
                parms.put("AND_doctorid_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_EQUALS", "Y");
            } else {
                parms.put("AND_doctorid_EQUALS", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_doctorid_NOT_EQUALS", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_GT", "Y");
            } else {
                parms.put("AND_doctorid_GT", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_GE", "Y");
            } else {
                parms.put("AND_doctorid_GE", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_LT", "Y");
            } else {
                parms.put("AND_doctorid_LT", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorid_LE", "Y");
            } else {
                parms.put("AND_doctorid_LE", "Y");
            }
            parms.put("doctorid", example.getDoctorid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getloginnameExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getLoginname_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_NULL", "Y");
            } else {
                parms.put("AND_loginname_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_NOT_NULL", "Y");
            } else {
                parms.put("AND_loginname_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_EQUALS", "Y");
            } else {
                parms.put("AND_loginname_EQUALS", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_loginname_NOT_EQUALS", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_GT", "Y");
            } else {
                parms.put("AND_loginname_GT", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_GE", "Y");
            } else {
                parms.put("AND_loginname_GE", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_LT", "Y");
            } else {
                parms.put("AND_loginname_LT", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_LE", "Y");
            } else {
                parms.put("AND_loginname_LE", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_loginname_LIKE", "Y");
            } else {
                parms.put("AND_loginname_LIKE", "Y");
            }
            parms.put("loginname", example.getLoginname());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getpasswordExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getPassword_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_NULL", "Y");
            } else {
                parms.put("AND_password_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_NOT_NULL", "Y");
            } else {
                parms.put("AND_password_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_EQUALS", "Y");
            } else {
                parms.put("AND_password_EQUALS", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_password_NOT_EQUALS", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_GT", "Y");
            } else {
                parms.put("AND_password_GT", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_GE", "Y");
            } else {
                parms.put("AND_password_GE", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_LT", "Y");
            } else {
                parms.put("AND_password_LT", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_LE", "Y");
            } else {
                parms.put("AND_password_LE", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_password_LIKE", "Y");
            } else {
                parms.put("AND_password_LIKE", "Y");
            }
            parms.put("password", example.getPassword());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getsectionidExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getSectionid_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_NULL", "Y");
            } else {
                parms.put("AND_sectionid_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_NOT_NULL", "Y");
            } else {
                parms.put("AND_sectionid_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_EQUALS", "Y");
            } else {
                parms.put("AND_sectionid_EQUALS", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_sectionid_NOT_EQUALS", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_GT", "Y");
            } else {
                parms.put("AND_sectionid_GT", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_GE", "Y");
            } else {
                parms.put("AND_sectionid_GE", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_LT", "Y");
            } else {
                parms.put("AND_sectionid_LT", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_sectionid_LE", "Y");
            } else {
                parms.put("AND_sectionid_LE", "Y");
            }
            parms.put("sectionid", example.getSectionid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getgroupidExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getGroupid_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_NULL", "Y");
            } else {
                parms.put("AND_groupid_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_NOT_NULL", "Y");
            } else {
                parms.put("AND_groupid_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_EQUALS", "Y");
            } else {
                parms.put("AND_groupid_EQUALS", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_groupid_NOT_EQUALS", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_GT", "Y");
            } else {
                parms.put("AND_groupid_GT", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_GE", "Y");
            } else {
                parms.put("AND_groupid_GE", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_LT", "Y");
            } else {
                parms.put("AND_groupid_LT", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_groupid_LE", "Y");
            } else {
                parms.put("AND_groupid_LE", "Y");
            }
            parms.put("groupid", example.getGroupid());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getdoctornameExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getDoctorname_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_NULL", "Y");
            } else {
                parms.put("AND_doctorname_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_NOT_NULL", "Y");
            } else {
                parms.put("AND_doctorname_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_EQUALS", "Y");
            } else {
                parms.put("AND_doctorname_EQUALS", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_doctorname_NOT_EQUALS", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_GT", "Y");
            } else {
                parms.put("AND_doctorname_GT", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_GE", "Y");
            } else {
                parms.put("AND_doctorname_GE", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_LT", "Y");
            } else {
                parms.put("AND_doctorname_LT", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_LE", "Y");
            } else {
                parms.put("AND_doctorname_LE", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctorname_LIKE", "Y");
            } else {
                parms.put("AND_doctorname_LIKE", "Y");
            }
            parms.put("doctorname", example.getDoctorname());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getidcardExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getIdcard_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_NULL", "Y");
            } else {
                parms.put("AND_idcard_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_NOT_NULL", "Y");
            } else {
                parms.put("AND_idcard_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_EQUALS", "Y");
            } else {
                parms.put("AND_idcard_EQUALS", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_idcard_NOT_EQUALS", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_GT", "Y");
            } else {
                parms.put("AND_idcard_GT", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_GE", "Y");
            } else {
                parms.put("AND_idcard_GE", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_LT", "Y");
            } else {
                parms.put("AND_idcard_LT", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_LE", "Y");
            } else {
                parms.put("AND_idcard_LE", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_idcard_LIKE", "Y");
            } else {
                parms.put("AND_idcard_LIKE", "Y");
            }
            parms.put("idcard", example.getIdcard());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getdoctormaleExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getDoctormale_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_NULL", "Y");
            } else {
                parms.put("AND_doctormale_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_NOT_NULL", "Y");
            } else {
                parms.put("AND_doctormale_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_EQUALS", "Y");
            } else {
                parms.put("AND_doctormale_EQUALS", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_doctormale_NOT_EQUALS", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_GT", "Y");
            } else {
                parms.put("AND_doctormale_GT", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_GE", "Y");
            } else {
                parms.put("AND_doctormale_GE", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_LT", "Y");
            } else {
                parms.put("AND_doctormale_LT", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_doctormale_LE", "Y");
            } else {
                parms.put("AND_doctormale_LE", "Y");
            }
            parms.put("doctormale", example.getDoctormale());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getbirthdayExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getBirthday_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_NULL", "Y");
            } else {
                parms.put("AND_birthday_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_NOT_NULL", "Y");
            } else {
                parms.put("AND_birthday_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_EQUALS", "Y");
            } else {
                parms.put("AND_birthday_EQUALS", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_birthday_NOT_EQUALS", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_GT", "Y");
            } else {
                parms.put("AND_birthday_GT", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_GE", "Y");
            } else {
                parms.put("AND_birthday_GE", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_LT", "Y");
            } else {
                parms.put("AND_birthday_LT", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_birthday_LE", "Y");
            } else {
                parms.put("AND_birthday_LE", "Y");
            }
            parms.put("birthday", example.getBirthday());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getmobilephoneExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getMobilephone_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_NULL", "Y");
            } else {
                parms.put("AND_mobilephone_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_NOT_NULL", "Y");
            } else {
                parms.put("AND_mobilephone_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_EQUALS", "Y");
            } else {
                parms.put("AND_mobilephone_EQUALS", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_mobilephone_NOT_EQUALS", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_GT", "Y");
            } else {
                parms.put("AND_mobilephone_GT", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_GE", "Y");
            } else {
                parms.put("AND_mobilephone_GE", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_LT", "Y");
            } else {
                parms.put("AND_mobilephone_LT", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_LE", "Y");
            } else {
                parms.put("AND_mobilephone_LE", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_mobilephone_LIKE", "Y");
            } else {
                parms.put("AND_mobilephone_LIKE", "Y");
            }
            parms.put("mobilephone", example.getMobilephone());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getcontactphoneExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getContactphone_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_NULL", "Y");
            } else {
                parms.put("AND_contactphone_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_NOT_NULL", "Y");
            } else {
                parms.put("AND_contactphone_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_EQUALS", "Y");
            } else {
                parms.put("AND_contactphone_EQUALS", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_contactphone_NOT_EQUALS", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_GT", "Y");
            } else {
                parms.put("AND_contactphone_GT", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_GE", "Y");
            } else {
                parms.put("AND_contactphone_GE", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_LT", "Y");
            } else {
                parms.put("AND_contactphone_LT", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_LE", "Y");
            } else {
                parms.put("AND_contactphone_LE", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_contactphone_LIKE", "Y");
            } else {
                parms.put("AND_contactphone_LIKE", "Y");
            }
            parms.put("contactphone", example.getContactphone());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getlevelExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getLevel_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_NULL", "Y");
            } else {
                parms.put("AND_level_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_NOT_NULL", "Y");
            } else {
                parms.put("AND_level_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_EQUALS", "Y");
            } else {
                parms.put("AND_level_EQUALS", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_level_NOT_EQUALS", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_GT", "Y");
            } else {
                parms.put("AND_level_GT", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_GE", "Y");
            } else {
                parms.put("AND_level_GE", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_LT", "Y");
            } else {
                parms.put("AND_level_LT", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_level_LE", "Y");
            } else {
                parms.put("AND_level_LE", "Y");
            }
            parms.put("level", example.getLevel());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getmajardescExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getMajardesc_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_NULL", "Y");
            } else {
                parms.put("AND_majardesc_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_NOT_NULL", "Y");
            } else {
                parms.put("AND_majardesc_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_EQUALS", "Y");
            } else {
                parms.put("AND_majardesc_EQUALS", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_majardesc_NOT_EQUALS", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_GT", "Y");
            } else {
                parms.put("AND_majardesc_GT", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_GE", "Y");
            } else {
                parms.put("AND_majardesc_GE", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_LT", "Y");
            } else {
                parms.put("AND_majardesc_LT", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_LE", "Y");
            } else {
                parms.put("AND_majardesc_LE", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        case DoctorExample.EXAMPLE_LIKE:
            if (example.isCombineTypeOr()) {
                parms.put("OR_majardesc_LIKE", "Y");
            } else {
                parms.put("AND_majardesc_LIKE", "Y");
            }
            parms.put("majardesc", example.getMajardesc());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getcurrentlogintimeExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getCurrentlogintime_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_NULL", "Y");
            } else {
                parms.put("AND_currentlogintime_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_NOT_NULL", "Y");
            } else {
                parms.put("AND_currentlogintime_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_EQUALS", "Y");
            } else {
                parms.put("AND_currentlogintime_EQUALS", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_currentlogintime_NOT_EQUALS", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_GT", "Y");
            } else {
                parms.put("AND_currentlogintime_GT", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_GE", "Y");
            } else {
                parms.put("AND_currentlogintime_GE", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_LT", "Y");
            } else {
                parms.put("AND_currentlogintime_LT", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_currentlogintime_LE", "Y");
            } else {
                parms.put("AND_currentlogintime_LE", "Y");
            }
            parms.put("currentlogintime", example.getCurrentlogintime());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getlatestlogintimeExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getLatestlogintime_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_NULL", "Y");
            } else {
                parms.put("AND_latestlogintime_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_NOT_NULL", "Y");
            } else {
                parms.put("AND_latestlogintime_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_EQUALS", "Y");
            } else {
                parms.put("AND_latestlogintime_EQUALS", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_latestlogintime_NOT_EQUALS", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_GT", "Y");
            } else {
                parms.put("AND_latestlogintime_GT", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_GE", "Y");
            } else {
                parms.put("AND_latestlogintime_GE", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_LT", "Y");
            } else {
                parms.put("AND_latestlogintime_LT", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_latestlogintime_LE", "Y");
            } else {
                parms.put("AND_latestlogintime_LE", "Y");
            }
            parms.put("latestlogintime", example.getLatestlogintime());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getcreateuserExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getCreateuser_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_NULL", "Y");
            } else {
                parms.put("AND_createuser_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_NOT_NULL", "Y");
            } else {
                parms.put("AND_createuser_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_EQUALS", "Y");
            } else {
                parms.put("AND_createuser_EQUALS", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_createuser_NOT_EQUALS", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_GT", "Y");
            } else {
                parms.put("AND_createuser_GT", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_GE", "Y");
            } else {
                parms.put("AND_createuser_GE", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_LT", "Y");
            } else {
                parms.put("AND_createuser_LT", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createuser_LE", "Y");
            } else {
                parms.put("AND_createuser_LE", "Y");
            }
            parms.put("createuser", example.getCreateuser());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getcreatetimeExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getCreatetime_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_NULL", "Y");
            } else {
                parms.put("AND_createtime_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_NOT_NULL", "Y");
            } else {
                parms.put("AND_createtime_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_EQUALS", "Y");
            } else {
                parms.put("AND_createtime_EQUALS", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_createtime_NOT_EQUALS", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_GT", "Y");
            } else {
                parms.put("AND_createtime_GT", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_GE", "Y");
            } else {
                parms.put("AND_createtime_GE", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_LT", "Y");
            } else {
                parms.put("AND_createtime_LT", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_createtime_LE", "Y");
            } else {
                parms.put("AND_createtime_LE", "Y");
            }
            parms.put("createtime", example.getCreatetime());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getupdateuserExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getUpdateuser_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_NULL", "Y");
            } else {
                parms.put("AND_updateuser_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_NOT_NULL", "Y");
            } else {
                parms.put("AND_updateuser_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_EQUALS", "Y");
            } else {
                parms.put("AND_updateuser_EQUALS", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_updateuser_NOT_EQUALS", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_GT", "Y");
            } else {
                parms.put("AND_updateuser_GT", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_GE", "Y");
            } else {
                parms.put("AND_updateuser_GE", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_LT", "Y");
            } else {
                parms.put("AND_updateuser_LT", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updateuser_LE", "Y");
            } else {
                parms.put("AND_updateuser_LE", "Y");
            }
            parms.put("updateuser", example.getUpdateuser());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getupdatetimeExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        switch (example.getUpdatetime_Indicator()) {
        case DoctorExample.EXAMPLE_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_NULL", "Y");
            } else {
                parms.put("AND_updatetime_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_NOT_NULL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_NOT_NULL", "Y");
            } else {
                parms.put("AND_updatetime_NOT_NULL", "Y");
            }
            break;
        case DoctorExample.EXAMPLE_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_EQUALS", "Y");
            } else {
                parms.put("AND_updatetime_EQUALS", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        case DoctorExample.EXAMPLE_NOT_EQUALS:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_NOT_EQUALS", "Y");
            } else {
                parms.put("AND_updatetime_NOT_EQUALS", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_GT", "Y");
            } else {
                parms.put("AND_updatetime_GT", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        case DoctorExample.EXAMPLE_GREATER_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_GE", "Y");
            } else {
                parms.put("AND_updatetime_GE", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_LT", "Y");
            } else {
                parms.put("AND_updatetime_LT", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        case DoctorExample.EXAMPLE_LESS_THAN_OR_EQUAL:
            if (example.isCombineTypeOr()) {
                parms.put("OR_updatetime_LE", "Y");
            } else {
                parms.put("AND_updatetime_LE", "Y");
            }
            parms.put("updatetime", example.getUpdatetime());
            break;
        }
        return parms;
    }

    /**
     * This method was generated by Abator for iBATIS.
     * This method corresponds to the database table doctor
     *
     * @abatorgenerated Sun Mar 10 20:47:14 CST 2013
     */
    private Map getExampleParms(DoctorExample example) {
        Map parms = new HashMap();
        parms.putAll(getdoctoridExampleParms(example));
        parms.putAll(getloginnameExampleParms(example));
        parms.putAll(getpasswordExampleParms(example));
        parms.putAll(getsectionidExampleParms(example));
        parms.putAll(getgroupidExampleParms(example));
        parms.putAll(getdoctornameExampleParms(example));
        parms.putAll(getidcardExampleParms(example));
        parms.putAll(getdoctormaleExampleParms(example));
        parms.putAll(getbirthdayExampleParms(example));
        parms.putAll(getmobilephoneExampleParms(example));
        parms.putAll(getcontactphoneExampleParms(example));
        parms.putAll(getlevelExampleParms(example));
        parms.putAll(getmajardescExampleParms(example));
        parms.putAll(getcurrentlogintimeExampleParms(example));
        parms.putAll(getlatestlogintimeExampleParms(example));
        parms.putAll(getcreateuserExampleParms(example));
        parms.putAll(getcreatetimeExampleParms(example));
        parms.putAll(getupdateuserExampleParms(example));
        parms.putAll(getupdatetimeExampleParms(example));
        return parms;
    }

	@Override
	public BaseResultDto<Doctor> selectBySearchDto(DoctorSearchDto sercharDto) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Doctor findDoctorByLoginnameAndPassword(Doctor doctor) {
		// TODO Auto-generated method stub
		return null;
	}
}